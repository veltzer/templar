- stop having the debian folder at all.
	move the last couple of files to be templates also.
		debian
		├── compat
		└── source
		    └── format
	only build the stuff there when doing debuild.
	in the same way only trigger rebuild of README.md when
	doing release.
	this means that making 'make' after checkout will do nothing.
- think about how we load stuff from the definitions in templar.
	Since we load it with loading every module we may not get stuff
	like package tools from python and this means we cannot load resources
	from the package.
	This is not good.
	Is there some other way of loading modules that will allow us to do that?
- look at the python checks in this module.
	write them up inside templar and allow to run them with the make_helper.
	use them in templar.
	use them in other scripts too.
- when reading all the defs configurations, do not just check os.path.isfile
	since it may be a symbolic dangling link and still pass the test.
	Check if I can read the file.
- add manual pages created by sphinx for all the executables here.
	Then remove the disregard to binary-without-manpage warnings at package creation.
- make the clean: target in the debian/rules makefile do something correct or
	close to correct.
- instead of having a stupid CREDITS, Changelog and debian changelog
	and LICENCE.
	create all of these intelligently using templar from git.
- why do we remove passwords when doing "makeprint".
	the reason is that we don't want passwords written to the .tdefs.config
	file.
	But we can have make(1) read the data from templar without saving it to file.
		that would actually be better because then no file would need to be created
		or changed.
	how do we do that?
	- one option is to create a fifo and have make read from that.
	- do we really need make to read from the file? maybe all make laws should
	be python processes and they can read the parameters directly from the py module?
	- for the time being, as long as we are using make, we really do need make to have access
	to templar parameters.
	- another option is to create the defs file as a temporary file in /tmp or something and
	have make read that. We can also remove the file after we read it, or at any case of make
	shutdown. Then the file will not leave traces of itself and there will be no chance
	of it accidentaly getting into source package and binary packages on the web.
	This way the file could contain passwords.
- add an example of ~/.personal.py file to the package so that people will know how to write this.
	generate it automatically from my own by hiding the passwords
