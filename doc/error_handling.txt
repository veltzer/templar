'''
all kinds of options to handle errors:
option1: assume we know the stack frame of the error
traceback=mako.exceptions.RichTraceback()
(filename, lineno, function, line)=traceback.traceback[-2]
print('{0}: error {1} in {2}, line {3}'.format(sys.argv[0], str(e), filename, lineno, function))
print('{0}'.format(line))
sys.exit(1)

option2: show full trace
traceback=mako.exceptions.RichTraceback()
for (filename, lineno, function, line) in traceback.traceback:
	print('File {0}, line {1}, in {2}'.format(filename, lineno, function))
	print(line)
print('{0}: {1}'.format(str(traceback.error.__class__.__name__), traceback.error))

option3: show a stupid error message
print('something bad happened')

option4: render the error (full stacktrace) using mako text error
print(mako.exceptions.text_error_template().render())

option5: raise the exception and make python show the stack trace
raise e

option6(chosen): show only errros in our file
traceback=mako.exceptions.RichTraceback()
for (filename, lineno, function, line) in traceback.traceback:
	if filename==args.input:
		print('{0}: error {1} in {2}, line {3}'.format(sys.argv[0], str(e), filename, lineno, function))
		print('{0}'.format(line))
sys.exit(1)
'''

