#!/usr/bin/python3

'''
this is a release script.
it runs git status -s in order to see that everything is commited.
it then tags the current tree with one + the old tag.
it then cleans and then rebuilds everything and puts the results in the output.

TODO:
- iterate all series wanted by the developer and release for all of them.
- add integration with twitter and facebook to announce new versions.
- try to use a better git interface (there are native python git interfaces).
'''

###########
# imports #
###########
import subprocess # for check_output, check_call, DEVNULL
import sys # for stderr
import templar.cmdline # for load_and_populate
import os # for environ, unlink
import glob # for glob

##############
# parameters #
##############
# do you want debug info printed?
opt_debug=True
# do you want to check if everything is commited ? Answer True to this
# unless you are doing development on this script...
opt_check=True

#############
# functions #
#############
def get_version():
	try:
		ver=subprocess.check_output(['git', 'describe','--abbrev=0'], stderr=subprocess.DEVNULL).decode().rstrip()
		return int(ver)
	except:
		return 0

'''execute a command with verbosity'''
def do(l):
	print('executing [{0}]...'.format(l), file=sys.stderr)
	if opt_debug:
		subprocess.check_call(l)
	else:
		subprocess.check_call(l, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

env_var='TEMPLAR_OVERRIDE'
def create_override_env(series):
	os.environ[env_var]='apt_codename={0}'.format(series)

def remove_override_env():
	del os.environ[env_var]

override_file_name='/tmp/templar_override.ini'
def create_override(series):
	with open(override_file_name, 'w') as f:
		print('[apt]', file=f)
		print('codename=\'{0}\''.format(series), file=f)

def remove_override():
	os.unlink(override_file_name)

########
# code #
########
d=templar.cmdline.load_and_populate()
deb_series=d.deb_series.split()

# check that everything is committed
if opt_check:
	out=subprocess.check_output(['git','status','-s']).decode()
	if out!='':
		print('first commit everything, then call me...', file=sys.stderr)
		sys.exit(1)

# tag the new version
tag=get_version();
if opt_debug:
	print('old tag is [{0}]'.format(tag))
tag+=1
if opt_debug:
	print('new tag is [{0}]'.format(tag))
tag=str(tag)
# tag the new tag
do(['git','tag','--annotate','--sign','-m',tag,tag])
# build and commit for templating files that have the version in them
do(['make','clean-hard'])
do(['make'])
do(['git','commit','--all','-m',tag])
do(['git','push',])

for series in deb_series:
	print('starting to build for series [{0}]'.format(series), file=sys.stderr)
	create_override(series)
	# now run release which should be configured in your makefile to do release work
	#do(['make', 'release'])
	do(['make', 'deb-build-debuild-source'])
	print(glob.glob('build.source/*'))
	remove_override()
